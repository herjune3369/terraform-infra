name: DevOps Infrastructure Automation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '1. devops/**'
  pull_request:
    branches: [ main ]
    paths:
      - '1. devops/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-west-2
  TF_VERSION: "1.5.0"

jobs:
  validate:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./1. devops
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./1. devops
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./1. devops
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Save Terraform outputs
      run: |
        cd terraform
        if [ -f "save_outputs.sh" ]; then
          chmod +x save_outputs.sh
          ./save_outputs.sh
        fi

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./1. devops
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3
    
    - name: Deploy with Ansible
      run: |
        cd ansible
        ansible-playbook -i inventories/aws_ec2.yml playbook.yml -e "env=${{ github.event.inputs.environment || 'dev' }}"
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "✅ DevOps deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
    
    - name: Notify on Failure
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "❌ DevOps deployment failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
        exit 1 