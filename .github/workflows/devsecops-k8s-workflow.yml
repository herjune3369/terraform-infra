name: DevSecOps-K8s Security Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ devsecops-k8s ]
  pull_request:
    branches: [ devsecops-k8s ]

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: '1.5.0'

jobs:
  trivy-fs-scan:
    name: Trivy File System Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner (File System)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'devsecops-2'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Upload Trivy FS results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-results
          path: trivy-results.sarif
      - name: Generate Trivy FS Summary
        if: always()
        run: |
          echo "## 🔍 Trivy File System Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f trivy-results.sarif ]; then
            echo "✅ File system scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "📁 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ File system scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
          fi



  trivy-configuration-layer:
    name: Configuration Layer - Trivy Multi-Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.64.1
          trivy --version
      
      - name: Debug Workspace Structure
        run: |
          echo "Current working directory:"
          pwd
          echo "Workspace structure:"
          ls -la
          echo "devsecops-k8s directory structure:"
          ls -la devsecops-k8s/
          echo "devsecops-k8s/terraform directory structure:"
          ls -la devsecops-k8s/terraform/
      
      # 1. IaC 스캔 (Terraform)
      - name: Run Trivy IaC Scan
        working-directory: devsecops-k8s/terraform
        run: |
          echo "🔍 Running Trivy IaC scan for Terraform..."
          trivy iac --iac-type terraform . --format sarif --output trivy-iac-results.sarif --severity CRITICAL,HIGH,MEDIUM,LOW
          echo "✅ IaC scan completed"
          ls -la trivy-iac-results.sarif || echo "⚠️ No IaC issues found"
      
      # 2. Kubernetes 매니페스트 스캔
      - name: Run Trivy Kubernetes Config Scan
        run: |
          echo "🔍 Running Trivy Kubernetes config scan..."
          # k8s 매니페스트 디렉토리 생성 (예시)
          mkdir -p devsecops-k8s/k8s/manifests
          echo "# Sample Kubernetes manifest for testing" > devsecops-k8s/k8s/manifests/sample-deployment.yaml
          echo "apiVersion: apps/v1" >> devsecops-k8s/k8s/manifests/sample-deployment.yaml
          echo "kind: Deployment" >> devsecops-k8s/k8s/manifests/sample-deployment.yaml
          
          trivy config devsecops-k8s/k8s/manifests/ --format sarif --output trivy-config-results.sarif --severity CRITICAL,HIGH,MEDIUM,LOW
          echo "✅ Kubernetes config scan completed"
          ls -la trivy-config-results.sarif || echo "⚠️ No Kubernetes config issues found"
      
      # 3. 컨테이너 이미지 스캔
      - name: Run Trivy Container Image Scan
        run: |
          echo "🔍 Running Trivy container image scan..."
          # 샘플 이미지로 스캔 (nginx:latest)
          trivy image nginx:latest --format sarif --output trivy-image-results.sarif --severity CRITICAL,HIGH,MEDIUM,LOW
          echo "✅ Container image scan completed"
          ls -la trivy-image-results.sarif || echo "⚠️ No container image issues found"
      
      # 결과 파일 업로드
      - name: Upload Trivy IaC Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-iac-results
          path: devsecops-k8s/terraform/trivy-iac-results.sarif
      
      - name: Upload Trivy Kubernetes Config Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-config-results
          path: trivy-config-results.sarif
      
      - name: Upload Trivy Container Image Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-results
          path: trivy-image-results.sarif
      
      # 종합 요약 생성
      - name: Generate Configuration Layer Summary
        if: always()
        run: |
          echo "## 🔍 Configuration Layer - Trivy Multi-Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Scan Results:" >> $GITHUB_STEP_SUMMARY
          
          # IaC 스캔 결과
          if [ -f devsecops-k8s/terraform/trivy-iac-results.sarif ]; then
            echo "✅ **IaC Scan (Terraform)**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **IaC Scan (Terraform)**: Failed or no results" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Kubernetes 스캔 결과
          if [ -f trivy-config-results.sarif ]; then
            echo "✅ **Kubernetes Config Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Kubernetes Config Scan**: Failed or no results" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 컨테이너 이미지 스캔 결과
          if [ -f trivy-image-results.sarif ]; then
            echo "✅ **Container Image Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Container Image Scan**: Failed or no results" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Output Files:" >> $GITHUB_STEP_SUMMARY
          echo "- `trivy-iac-results.sarif`: Terraform IaC scan results" >> $GITHUB_STEP_SUMMARY
          echo "- `trivy-config-results.sarif`: Kubernetes config scan results" >> $GITHUB_STEP_SUMMARY
          echo "- `trivy-image-results.sarif`: Container image scan results" >> $GITHUB_STEP_SUMMARY

  ai-security-report:
    name: AI Security Report
    runs-on: ubuntu-latest
    needs: [trivy-fs-scan, trivy-configuration-layer]
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # 다운로드 모든 Trivy 결과
      - name: Download Trivy FS results
        uses: actions/download-artifact@v4
        if: needs.trivy-fs-scan.result == 'success'
        with:
          name: trivy-fs-results
          path: .
      
      - name: Download Trivy IaC results
        uses: actions/download-artifact@v4
        if: needs.trivy-configuration-layer.result == 'success'
        with:
          name: trivy-iac-results
          path: .
      
      - name: Download Trivy Kubernetes Config results
        uses: actions/download-artifact@v4
        if: needs.trivy-configuration-layer.result == 'success'
        with:
          name: trivy-config-results
          path: .
      
      - name: Download Trivy Container Image results
        uses: actions/download-artifact@v4
        if: needs.trivy-configuration-layer.result == 'success'
        with:
          name: trivy-image-results
          path: .


      - name: Debug Workspace Structure for AI Report
        run: |
          echo "Current working directory:"
          pwd
          echo "Workspace structure:"
          ls -la
          echo "devsecops-k8s directory structure:"
          ls -la devsecops-k8s/
          echo "Looking for generate_security_report.py:"
          find . -name "generate_security_report.py" -type f
          echo "Available Trivy result files:"
          ls -la *.sarif || echo "No SARIF files found"
      
      - name: Copy Trivy results to devsecops-k8s directory
        run: |
          mkdir -p devsecops-k8s/trivy-results
          # 모든 SARIF 파일을 복사
          if [ -f trivy-results.sarif ]; then
            cp trivy-results.sarif devsecops-k8s/trivy-results/
          fi
          if [ -f trivy-iac-results.sarif ]; then
            cp trivy-iac-results.sarif devsecops-k8s/trivy-results/
          fi
          if [ -f trivy-config-results.sarif ]; then
            cp trivy-config-results.sarif devsecops-k8s/trivy-results/
          fi
          if [ -f trivy-image-results.sarif ]; then
            cp trivy-image-results.sarif devsecops-k8s/trivy-results/
          fi
          echo "Copied Trivy results to devsecops-k8s/trivy-results/"

      - name: Generate AI Security Report
        run: |
          cd devsecops-k8s
          if [ -f generate_security_report.py ]; then
            python3 generate_security_report.py
          else
            echo "generate_security_report.py not found, skipping AI report generation"
          fi
      - name: Upload AI Security Report
        uses: actions/upload-artifact@v4
        if: hashFiles('devsecops-k8s/trivy-security-report.md') != ''
        with:
          name: trivy-ai-security-report
          path: devsecops-k8s/trivy-security-report.md
      - name: Generate Final AI Summary
        run: |
          echo "## 🤖 AI Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Status: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy File System Scan: ${{ needs.trivy-fs-scan.result }}" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 AI Security Report (trivy-security-report.md)" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Security Tab" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy FS Results: trivy-results.sarif" >> $GITHUB_STEP_SUMMARY



  validate-infrastructure:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    needs: [ai-security-report]
    if: needs.ai-security-report.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Format Check
        working-directory: devsecops-2/terraform
        run: terraform fmt -check -recursive
      - name: Terraform Init
        working-directory: devsecops-2/terraform
        run: |
          terraform init
          terraform validate
      - name: Terraform Plan
        working-directory: devsecops-2/terraform
        run: |
          terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-infrastructure]
    if: needs.validate-infrastructure.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        working-directory: devsecops-2/terraform
        run: |
          terraform init
      - name: Terraform Apply
        working-directory: devsecops-2/terraform
        run: |
          terraform apply -auto-approve
      - name: Save Terraform outputs
        working-directory: devsecops-2/terraform
        run: |
          if [ -f "save_outputs.sh" ]; then
            chmod +x save_outputs.sh
            ./save_outputs.sh
          fi

  deploy-application:
    name: Deploy Security Scanner Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: needs.deploy-infrastructure.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3
      - name: Setup Terraform for outputs
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Generate Terraform outputs
        working-directory: devsecops-2/terraform
        run: |
          terraform init
          terraform output -json > ../ansible/terraform_outputs.json
          echo "✅ Terraform outputs generated"
      - name: Setup SSH key
        working-directory: devsecops-2/ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/saju_key
          chmod 600 ~/.ssh/saju_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/saju_key
          echo "SSH key setup completed"
          ls -la ~/.ssh/
          ssh-add -l
      - name: Check terraform_outputs.json exists
        working-directory: devsecops-2/ansible
        run: |
          ls -l terraform_outputs.json
          cat terraform_outputs.json
      - name: Deploy with Ansible
        working-directory: devsecops-2/ansible
        run: ansible-playbook -i inventories/aws_ec2.yml playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application, ai-security-report]
    if: always()
    steps:
      - name: Notify on Success
        if: needs.deploy-application.result == 'success' && needs.ai-security-report.result == 'success'
        run: |
          echo "✅ DevSecOps deployment completed successfully!"
          echo "Security scan and infrastructure deployment completed"
      - name: Notify on Failure
        if: needs.deploy-application.result == 'failure' || needs.ai-security-report.result == 'failure'
        run: |
          echo "❌ DevSecOps deployment failed!"
          echo "Check the logs for more details"
