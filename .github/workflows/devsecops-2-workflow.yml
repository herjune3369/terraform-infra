name: DevSecOps-2 Security Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ devsecops-2 ]
  pull_request:
    branches: [ devsecops-2 ]

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: '1.5.0'

jobs:
  trivy-fs-scan:
    name: Trivy File System Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner (File System)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'devsecops-2'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Upload Trivy FS results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-results
          path: trivy-results.sarif
      - name: Generate Trivy FS Summary
        if: always()
        run: |
          echo "## 🔍 Trivy File System Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f trivy-results.sarif ]; then
            echo "✅ File system scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "📁 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ File system scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
          fi



  trivy-iac-scan:
    name: Trivy IaC Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Debug Workspace Structure
        run: |
          echo "Current working directory:"
          pwd
          echo "Workspace structure:"
          ls -la
          echo "devsecops-2 directory structure:"
          ls -la devsecops-2/
          echo "devsecops-2/terraform directory structure:"
          ls -la devsecops-2/terraform/
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.64.1
      - name: Run Trivy for Infrastructure as Code
        working-directory: devsecops-2/terraform
        run: |
          echo "Running Trivy IaC scan in $(pwd)"
          ls -la
          trivy config . --format sarif --output trivy-iac-results.sarif --severity CRITICAL,HIGH,MEDIUM,LOW
          echo "Checking if result file was created:"
          ls -la trivy-iac-results.sarif || echo "Result file not found"
          echo "Creating empty result file if scan found no issues:"
          if [ ! -f trivy-iac-results.sarif ]; then
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json", "runs": []}' > trivy-iac-results.sarif
          fi
          echo "Final result file location:"
          ls -la trivy-iac-results.sarif
      - name: Upload Trivy IaC results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-iac-results
          path: devsecops-2/terraform/trivy-iac-results.sarif
      - name: Generate Trivy IaC Summary
        if: always()
        run: |
          echo "## 🏗️ Trivy Infrastructure as Code Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f trivy-iac-results.sarif ]; then
            echo "✅ IaC scan completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ IaC scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
          fi

  ai-security-report:
    name: AI Security Report
    runs-on: ubuntu-latest
    needs: [trivy-fs-scan]
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Download Trivy FS results
        uses: actions/download-artifact@v4
        if: needs.trivy-fs-scan.result == 'success'
        with:
          name: trivy-fs-results
          path: .


      - name: Debug Workspace Structure for AI Report
        run: |
          echo "Current working directory:"
          pwd
          echo "Workspace structure:"
          ls -la
          echo "devsecops-2 directory structure:"
          ls -la devsecops-2/
          echo "Looking for generate_security_report.py:"
          find . -name "generate_security_report.py" -type f
      - name: Copy Trivy results to devsecops-2 directory
        run: |
          if [ -f trivy-results.sarif ]; then
            cp trivy-results.sarif devsecops-2/
          fi

      - name: Generate AI Security Report
        run: |
          cd devsecops-2
          if [ -f generate_security_report.py ]; then
            python3 generate_security_report.py
          else
            echo "generate_security_report.py not found, skipping AI report generation"
          fi
      - name: Upload AI Security Report
        uses: actions/upload-artifact@v4
        if: hashFiles('devsecops-2/trivy-security-report.md') != ''
        with:
          name: trivy-ai-security-report
          path: devsecops-2/trivy-security-report.md
      - name: Generate Final AI Summary
        run: |
          echo "## 🤖 AI Security Scan Complete" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Status: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy File System Scan: ${{ needs.trivy-fs-scan.result }}" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 AI Security Report (trivy-security-report.md)" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Security Tab" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy FS Results: trivy-results.sarif" >> $GITHUB_STEP_SUMMARY



  validate-infrastructure:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    needs: [ai-security-report]
    if: needs.ai-security-report.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Format Check
        working-directory: devsecops-2/terraform
        run: terraform fmt -check -recursive
      - name: Terraform Init
        working-directory: devsecops-2/terraform
        run: |
          terraform init
          terraform validate
      - name: Terraform Plan
        working-directory: devsecops-2/terraform
        run: |
          terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-infrastructure]
    if: needs.validate-infrastructure.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        working-directory: devsecops-2/terraform
        run: |
          terraform init
      - name: Terraform Apply
        working-directory: devsecops-2/terraform
        run: |
          terraform apply -auto-approve
      - name: Save Terraform outputs
        working-directory: devsecops-2/terraform
        run: |
          if [ -f "save_outputs.sh" ]; then
            chmod +x save_outputs.sh
            ./save_outputs.sh
          fi

  deploy-application:
    name: Deploy Security Scanner Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: needs.deploy-infrastructure.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3
      - name: Setup Terraform for outputs
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Generate Terraform outputs
        working-directory: devsecops-2/terraform
        run: |
          terraform init
          terraform output -json > ../ansible/terraform_outputs.json
          echo "✅ Terraform outputs generated"
      - name: Setup SSH key
        working-directory: devsecops-2/ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/saju_key
          chmod 600 ~/.ssh/saju_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/saju_key
          echo "SSH key setup completed"
          ls -la ~/.ssh/
          ssh-add -l
      - name: Check terraform_outputs.json exists
        working-directory: devsecops-2/ansible
        run: |
          ls -l terraform_outputs.json
          cat terraform_outputs.json
      - name: Deploy with Ansible
        working-directory: devsecops-2/ansible
        run: ansible-playbook -i inventories/aws_ec2.yml playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application, ai-security-report]
    if: always()
    steps:
      - name: Notify on Success
        if: needs.deploy-application.result == 'success' && needs.ai-security-report.result == 'success'
        run: |
          echo "✅ DevSecOps deployment completed successfully!"
          echo "Security scan and infrastructure deployment completed"
      - name: Notify on Failure
        if: needs.deploy-application.result == 'failure' || needs.ai-security-report.result == 'failure'
        run: |
          echo "❌ DevSecOps deployment failed!"
          echo "Check the logs for more details"
