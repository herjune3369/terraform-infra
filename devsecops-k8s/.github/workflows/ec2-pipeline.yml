name: EC2 Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  security-events: write

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: "1.5.0"

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup old terraform state
      run: rm -rf .terraform terraform.tfstate* tfplan*

    - name: Terraform Init (Local Backend)
      run: terraform init -backend=false

    - name: Terraform Plan and Apply Backend
      run: |
        echo "Creating backend infrastructure..."
        terraform plan -target=aws_s3_bucket.terraform_state -target=aws_dynamodb_table.terraform_locks -out=tfplan-backend
        terraform apply tfplan-backend
        echo "Backend infrastructure created successfully!"

    - name: Get Backend Config
      id: backend-config
      run: |
        BACKEND_CONFIG=$(terraform output -json backend_config)
        echo "backend_config=$BACKEND_CONFIG" >> $GITHUB_OUTPUT
        echo "Backend config: $BACKEND_CONFIG"

    - name: Wait for DynamoDB table
      run: |
        echo "Waiting for DynamoDB table to be active..."
        sleep 60
        echo "Checking DynamoDB table status..."
        aws dynamodb describe-table --table-name $(terraform output -raw backend_config | jq -r '.dynamodb_table') --region ap-northeast-2

    - name: Terraform Init with S3 Backend
      run: |
        BACKEND_CONFIG='${{ steps.backend-config.outputs.backend-config }}'
        echo "Initializing with backend config: $BACKEND_CONFIG"
        echo "Bucket: $(echo $BACKEND_CONFIG | jq -r '.bucket')"
        echo "DynamoDB Table: $(echo $BACKEND_CONFIG | jq -r '.dynamodb_table')"
        echo "Region: $(echo $BACKEND_CONFIG | jq -r '.region')"
        terraform init \
          -backend-config="bucket=$(echo $BACKEND_CONFIG | jq -r '.bucket')" \
          -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')" \
          -backend-config="region=$(echo $BACKEND_CONFIG | jq -r '.region')" \
          -backend-config="dynamodb_table=$(echo $BACKEND_CONFIG | jq -r '.dynamodb_table')" \
          -backend-config="encrypt=$(echo $BACKEND_CONFIG | jq -r '.encrypt')"
        echo "Backend initialization completed!"

    - name: Terraform Plan (Full Infrastructure)
      run: |
        echo "Planning full infrastructure..."
        terraform plan -out=tfplan
      if: github.event_name == 'pull_request'

    - name: Terraform Apply (Full Infrastructure)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Applying full infrastructure..."
        terraform apply tfplan

    - name: Generate Terraform outputs
      run: terraform output -json > terraform_outputs.json
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  ansible-deploy:
    name: Ansible Deploy
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt-get install -y ansible

    - name: Install Ansible Galaxy roles
      working-directory: ansible
      run: ansible-galaxy install -r requirements.yml

    - name: Copy Terraform outputs
      run: cp terraform/terraform_outputs.json ansible/

    - name: Deploy Flask App
      working-directory: ansible
      run: ansible-playbook playbook.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'devsecops-k8s/'
        format: 'sarif'
        output: 'devsecops-k8s/trivy-results.sarif'

    - name: Run Trivy IaC scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'devsecops-k8s/'
        format: 'sarif'
        output: 'devsecops-k8s/trivy-iac-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'devsecops-k8s/trivy-results.sarif'

    - name: Upload Trivy IaC scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'devsecops-k8s/trivy-iac-results.sarif'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r devsecops-k8s/requirements.txt

    - name: Generate Security Report
      run: |
        python devsecops-k8s/generate_security_report.py
      if: always()

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: devsecops-k8s/trivy-security-report.md

    - name: Read Security Report
      id: report
      run: |
        if [ -f "devsecops-k8s/trivy-security-report.md" ]; then
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat devsecops-k8s/trivy-security-report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "summary=보안 스캔 보고서를 생성할 수 없습니다." >> $GITHUB_OUTPUT
        fi
      if: always() && github.event_name == 'pull_request'

    - name: Comment PR with Security Report
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = 'devsecops-k8s/trivy-security-report.md';
            if (fs.existsSync(reportPath)) {
              const reportContent = fs.readFileSync(reportPath, 'utf8');
              
              // PR 코멘트 생성
              const comment = '## 🔍 보안 스캔 결과 요약\n\n' + reportContent + '\n\n---\n*이 보고서는 자동으로 생성되었습니다. 자세한 내용은 GitHub Security 탭을 확인하세요.*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('✅ 보안 스캔 보고서가 PR에 코멘트로 추가되었습니다.');
            } else {
              console.log('⚠️ 보안 스캔 보고서 파일을 찾을 수 없습니다.');
            }
          } catch (error) {
            console.error('❌ PR 코멘트 생성 중 오류 발생:', error.message);
          } 