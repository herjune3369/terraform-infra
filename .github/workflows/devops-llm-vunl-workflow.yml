name: DevOps LLM VUNL Infrastructure Automation

on:
  push:
    branches: [ main, develop, devops-llm-vunl, feature/chatbot ]
    paths:
      - 'devops-llm-vunl/**'
      - '.github/workflows/devops-llm-vunl-workflow.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'devops-llm-vunl/**'
      - '.github/workflows/devops-llm-vunl-workflow.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      deploy_type:
        description: 'What to deploy'
        required: true
        default: 'app'
        type: choice
        options:
        - infra
        - app
        - both

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: "1.5.0"

jobs:
  validate:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    needs: []
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devops-llm-vunl' || github.ref == 'refs/heads/feature/chatbot' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Debug 파일 구조
      working-directory: ./devops-llm-vunl
      run: |
        echo "🏷️ 현재 작업 디렉터리: $(pwd)"
        echo "📂 devops-llm-vunl 폴더 구조:"
        ls -la
        echo ""
        echo "📁 terraform 폴더 확인:"
        if [ -d "terraform" ]; then
          ls -la terraform/
          echo ""
          echo "🔍 .tf 파일 검색:"
          find terraform -name "*.tf" -type f 2>/dev/null || echo "No .tf files found"
        else
          echo "❌ terraform 폴더가 없습니다!"
        fi
    
    - name: Setup new S3 backend
      working-directory: ./devops-llm-vunl/terraform
      run: |
        echo "🔧 Setting up new S3 backend for devops-llm-vunl..."
        
        # 새로운 S3 버킷 생성
        if aws s3 ls s3://terraform-state-junheo-llm-vunl-2024 2>/dev/null; then
          echo "✅ S3 bucket terraform-state-junheo-llm-vunl-2024 already exists"
        else
          echo "🆕 Creating new S3 bucket: terraform-state-junheo-llm-vunl-2024"
          aws s3 mb s3://terraform-state-junheo-llm-vunl-2024 --region ap-northeast-2
          aws s3api put-bucket-versioning --bucket terraform-state-junheo-llm-vunl-2024 --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket terraform-state-junheo-llm-vunl-2024 --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'
          echo "✅ S3 bucket created with versioning and encryption"
        fi
        
        # 새로운 DynamoDB 테이블 생성
        if aws dynamodb describe-table --table-name terraform-state-lock-llm-vunl --region ap-northeast-2 2>/dev/null; then
          echo "✅ DynamoDB table terraform-state-lock-llm-vunl already exists"
        else
          echo "🆕 Creating new DynamoDB table: terraform-state-lock-llm-vunl"
          aws dynamodb create-table \
            --table-name terraform-state-lock-llm-vunl \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ap-northeast-2
          echo "✅ DynamoDB table created"
        fi
        
        # 기존 state lock 정리 (있다면)
        echo "🧹 Cleaning up any existing locks..."
        aws dynamodb scan --table-name terraform-state-lock-llm-vunl --region ap-northeast-2 --query 'Items[].LockID.S' --output text 2>/dev/null | while read lock_id; do
          if [ "$lock_id" != "None" ] && [ "$lock_id" != "" ]; then
            echo "🔓 Removing lock: $lock_id"
            aws dynamodb delete-item --table-name terraform-state-lock-llm-vunl --key "{\"LockID\":{\"S\":\"$lock_id\"}}" --region ap-northeast-2
          fi
        done
        echo "✅ Backend setup completed"
      continue-on-error: true
    
    - name: Terraform Format Check
      working-directory: ./devops-llm-vunl/terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: ./devops-llm-vunl/terraform
      run: |
        terraform init
        terraform validate
    
    - name: Terraform Plan
      working-directory: ./devops-llm-vunl/terraform
      run: terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-llm-vunl
        path: ./devops-llm-vunl/terraform/tfplan

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devops-llm-vunl' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-llm-vunl
        path: ./devops-llm-vunl/terraform/
    
    - name: Setup new S3 backend
      working-directory: ./devops-llm-vunl/terraform
      run: |
        echo "🔧 Setting up new S3 backend for devops-llm-vunl..."
        
        # 새로운 S3 버킷 생성
        if aws s3 ls s3://terraform-state-junheo-llm-vunl-2024 2>/dev/null; then
          echo "✅ S3 bucket terraform-state-junheo-llm-vunl-2024 already exists"
        else
          echo "🆕 Creating new S3 bucket: terraform-state-junheo-llm-vunl-2024"
          aws s3 mb s3://terraform-state-junheo-llm-vunl-2024 --region ap-northeast-2
          aws s3api put-bucket-versioning --bucket terraform-state-junheo-llm-vunl-2024 --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket terraform-state-junheo-llm-vunl-2024 --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'
          echo "✅ S3 bucket created with versioning and encryption"
        fi
        
        # 새로운 DynamoDB 테이블 생성
        if aws dynamodb describe-table --table-name terraform-state-lock-llm-vunl --region ap-northeast-2 2>/dev/null; then
          echo "✅ DynamoDB table terraform-state-lock-llm-vunl already exists"
        else
          echo "🆕 Creating new DynamoDB table: terraform-state-lock-llm-vunl"
          aws dynamodb create-table \
            --table-name terraform-state-lock-llm-vunl \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ap-northeast-2
          echo "✅ DynamoDB table created"
        fi
        
        # 기존 state lock 정리 (있다면)
        echo "🧹 Cleaning up any existing locks..."
        aws dynamodb scan --table-name terraform-state-lock-llm-vunl --region ap-northeast-2 --query 'Items[].LockID.S' --output text 2>/dev/null | while read lock_id; do
          if [ "$lock_id" != "None" ] && [ "$lock_id" != "" ]; then
            echo "🔓 Removing lock: $lock_id"
            aws dynamodb delete-item --table-name terraform-state-lock-llm-vunl --key "{\"LockID\":{\"S\":\"$lock_id\"}}" --region ap-northeast-2
          fi
        done
        echo "✅ Backend setup completed"
      continue-on-error: true
    
    - name: Terraform Init
      working-directory: ./devops-llm-vunl/terraform
      run: terraform init
    
    - name: Terraform Apply
      working-directory: ./devops-llm-vunl/terraform
      run: terraform apply tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
    
    - name: Save Terraform outputs
      working-directory: ./devops-llm-vunl/terraform
      run: |
        if [ -f "save_outputs.sh" ]; then
          chmod +x save_outputs.sh
          ./save_outputs.sh
        fi

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/devops-llm-vunl' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ansible and AWS plugins
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3
        ansible-galaxy collection install amazon.aws
    
    - name: Setup Terraform for outputs
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Generate Terraform outputs
      working-directory: ./devops-llm-vunl/terraform
      run: |
        terraform init
        terraform output -json > ../ansible/terraform_outputs.json
        echo "✅ Terraform outputs generated"
    
    - name: Setup SSH key
      working-directory: ./devops-llm-vunl/ansible
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        echo "SSH key setup completed"
        echo "🔑 SSH 키 정보:"
        ls -la ~/.ssh/
        ssh-add -l
        echo ""
        echo "🔍 AWS 키 페어 정보:"
        aws ec2 describe-key-pairs --query 'KeyPairs[?contains(KeyName, `saju-app-key`)].{KeyName:KeyName,KeyFingerprint:KeyFingerprint}' --output table
        echo ""
        echo "🔍 SSH 키 지문 확인:"
        ssh-keygen -lf ~/.ssh/id_rsa || echo "SSH 키 지문 확인 실패"
    
    - name: Debug AWS EC2 inventory
      working-directory: ./devops-llm-vunl/ansible
      run: |
        echo "🔍 Testing AWS EC2 inventory..."
        ansible-inventory -i inventories/aws_ec2.yml --list
        echo "✅ AWS EC2 inventory test completed"
        
        echo "🔍 Getting EC2 instance information..."
        WEB1_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=webserver1" "Name=instance-state-name,Values=running" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        WEB2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=webserver2" "Name=instance-state-name,Values=running" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        
        echo "🌐 Webserver1 IP: $WEB1_IP"
        echo "🌐 Webserver2 IP: $WEB2_IP"
        
        if [ "$WEB1_IP" != "None" ] && [ "$WEB1_IP" != "" ]; then
          echo "🔍 Testing SSH connection to webserver1 ($WEB1_IP)..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa -v ubuntu@$WEB1_IP "echo 'SSH connection successful'" || echo "SSH connection to webserver1 failed"
        else
          echo "❌ Webserver1 IP not found or instance not running"
        fi
        
        if [ "$WEB2_IP" != "None" ] && [ "$WEB2_IP" != "" ]; then
          echo "🔍 Testing SSH connection to webserver2 ($WEB2_IP)..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa -v ubuntu@$WEB2_IP "echo 'SSH connection successful'" || echo "SSH connection to webserver2 failed"
        else
          echo "❌ Webserver2 IP not found or instance not running"
        fi
    
    - name: Deploy with Ansible
      working-directory: ./devops-llm-vunl/ansible
      run: |
        echo "🚀 Ansible 배포 시작..."
        echo "📁 현재 작업 디렉터리: $(pwd)"
        echo "🔑 SSH 키 경로: ~/.ssh/id_rsa"
        echo "📋 인벤토리 파일: inventories/aws_ec2.yml"
        echo "📄 플레이북 파일: playbook.yml"
        
        ansible-playbook -i inventories/aws_ec2.yml playbook.yml \
          -e "env=${{ github.event.inputs.environment || 'dev' }}" \
          -e "gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
          --private-key ~/.ssh/id_rsa \
          -v
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "✅ DevOps LLM VUNL deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
    
    - name: Notify on Failure
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "❌ DevOps LLM VUNL deployment failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
        exit 1 