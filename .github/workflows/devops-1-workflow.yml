name: DevOps Infrastructure Automation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'devops-1/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'devops-1/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: "1.5.0"

jobs:
  validate:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./devops-1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Debug ÌååÏùº Íµ¨Ï°∞
      run: |
        echo "üè∑Ô∏è ÌòÑÏû¨ ÏûëÏóÖ ÎîîÎ†âÌÑ∞Î¶¨: $(pwd)"
        echo "üìÇ Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Íµ¨Ï°∞ Ï†ÑÏ≤¥:"
        ls -la
        echo ""
        echo "üìÅ devops-1 Ìè¥Îçî ÌôïÏù∏:"
        if [ -d "devops-1" ]; then
          ls -la devops-1/
          echo ""
          echo "üìÅ devops-1/terraform Ìè¥Îçî ÌôïÏù∏:"
          if [ -d "devops-1/terraform" ]; then
            ls -la devops-1/terraform/
          else
            echo "‚ùå devops-1/terraform Ìè¥ÎçîÍ∞Ä ÏóÜÏäµÎãàÎã§!"
          fi
        else
          echo "‚ùå devops-1 Ìè¥ÎçîÍ∞Ä ÏóÜÏäµÎãàÎã§!"
        fi
        echo ""
        echo "üîç .tf ÌååÏùº Í≤ÄÏÉâ:"
        find . -name "*.tf" -type f 2>/dev/null || echo "No .tf files found"
    
    - name: Terraform Format Check
      working-directory: ./devops-1/terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: ./devops-1/terraform
      run: |
        terraform init
        terraform validate
    
    - name: Terraform Plan
      working-directory: ./devops-1/terraform
      run: terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  # Security scan removed - DevSecOps project handles security scanning

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./devops-1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: ./devops-1/terraform
      run: terraform init
    
    - name: Terraform Apply
      working-directory: ./devops-1/terraform
      run: terraform apply -auto-approve
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
    
    - name: Save Terraform outputs
      working-directory: ./devops-1/terraform
      run: |
        if [ -f "save_outputs.sh" ]; then
          chmod +x save_outputs.sh
          ./save_outputs.sh
        fi

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./devops-1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ansible and AWS plugins
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3
        ansible-galaxy collection install amazon.aws
    
    - name: Setup Terraform for outputs
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Generate Terraform outputs
      working-directory: ./devops-1/terraform
      run: |
        terraform init
        terraform output -json > ../ansible/terraform_outputs.json
        echo "‚úÖ Terraform outputs generated"
    
    - name: Setup SSH key using EC2 Instance Connect
      working-directory: ./devops-1/ansible
      run: |
        # Generate a new SSH key pair for this session
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/temp_key -N "" -C "github-actions"
        
        # Send public key to EC2 instances using EC2 Instance Connect
        aws ec2-instance-connect send-ssh-public-key \
          --instance-id i-0f305c21983019008 \
          --availability-zone ap-northeast-2a \
          --instance-os-user ubuntu \
          --ssh-public-key file://~/.ssh/temp_key.pub \
          --region ap-northeast-2
        
        aws ec2-instance-connect send-ssh-public-key \
          --instance-id i-07890465f2908b3a7 \
          --availability-zone ap-northeast-2b \
          --instance-os-user ubuntu \
          --ssh-public-key file://~/.ssh/temp_key.pub \
          --region ap-northeast-2
        
        # Set up SSH agent
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/temp_key
        
        echo "EC2 Instance Connect SSH key setup completed"
        ls -la ~/.ssh/
        ssh-add -l
    
    - name: Debug AWS EC2 inventory
      working-directory: ./devops-1/ansible
      run: |
        echo "üîç Testing AWS EC2 inventory..."
        ansible-inventory -i inventories/aws_ec2.yml --list
        echo "‚úÖ AWS EC2 inventory test completed"
        
        echo "üîç Testing SSH connection to webserver1..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/temp_key -v ubuntu@43.201.46.184 "echo 'SSH connection successful'" || echo "SSH connection to webserver1 failed"
        
        echo "üîç Testing SSH connection to webserver2..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/temp_key -v ubuntu@43.202.158.58 "echo 'SSH connection successful'" || echo "SSH connection to webserver2 failed"
    
    - name: Deploy with Ansible
      working-directory: ./devops-1/ansible
      run: ansible-playbook -i inventories/aws_ec2.yml playbook.yml -e "env=${{ github.event.inputs.environment || 'dev' }}" --private-key ~/.ssh/temp_key
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "‚úÖ DevOps deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
    
    - name: Notify on Failure
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "‚ùå DevOps deployment failed!"
        echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
        exit 1 