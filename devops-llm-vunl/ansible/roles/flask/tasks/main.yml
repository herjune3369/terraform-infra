---
- name: Install system packages
  apt:
    name:
      - python3-pip
      - python3-venv
      - mysql-client
    update_cache: yes
  become: true

- name: Create Flask app directory
  file:
    path: /home/ubuntu/myapp
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Set up Python virtual environment
  command: python3 -m venv /home/ubuntu/myapp/venv
  args:
    creates: /home/ubuntu/myapp/venv
  become: true

- name: Create requirements.txt
  copy:
    dest: /home/ubuntu/myapp/requirements.txt
    content: |
      flask<3
      requests
      pymysql
      python-dotenv
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Install python-dotenv
  pip:
    name: python-dotenv
    virtualenv: /home/ubuntu/myapp/venv

- name: Install pip packages in venv
  pip:
    requirements: /home/ubuntu/myapp/requirements.txt
    virtualenv: /home/ubuntu/myapp/venv
    virtualenv_command: python3 -m venv
  become: true



- name: Copy SQL initialization script
  copy:
    src: init_db.sql
    dest: /home/ubuntu/myapp/init_db.sql
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Initialize database
  shell: |
    echo "🔧 데이터베이스 초기화 시작..."
    echo "📊 RDS 엔드포인트: {{ rds_endpoint }}"
    echo "👤 사용자: admin"
    
    # 데이터베이스 연결 테스트
    mysql -h {{ rds_endpoint }} -u admin -p'{{ db_password }}' -e "SELECT 1;" || {
      echo "❌ 데이터베이스 연결 실패"
      exit 1
    }
    
    # 데이터베이스 초기화 스크립트 실행
    mysql -h {{ rds_endpoint }} -u admin -p'{{ db_password }}' < /home/ubuntu/myapp/init_db.sql && {
      echo "✅ 데이터베이스 초기화 완료"
      
      # 테이블 생성 확인
      mysql -h {{ rds_endpoint }} -u admin -p'{{ db_password }}' -e "USE flask_app; SHOW TABLES;" || {
        echo "❌ 테이블 생성 확인 실패"
        exit 1
      }
    } || {
      echo "❌ 데이터베이스 초기화 실패"
      exit 1
    }
  register: db_init_result
  failed_when: false  # 데이터베이스 초기화 실패를 무시하고 계속 진행

- name: Create environment file for Flask (.env)
  copy:
    dest: /home/ubuntu/myapp/.env
    content: |
      FLASK_APP=app.py
      FLASK_ENV=production
      FLASK_DEBUG=0
      RDS_HOST={{ rds_endpoint }}
      RDS_USER=admin
      RDS_PASSWORD={{ db_password }}
      RDS_DATABASE=flask_app
      GEMINI_API_KEY={{ gemini_api_key | default('your-gemini-api-key-here') }}
      UPLOAD_FOLDER=uploads
      MAX_CONTENT_LENGTH=16777216
      SECRET_KEY=your-secret-key-here
    owner: ubuntu
    group: ubuntu
    mode: '0600'

- name: Copy Flask app.py
  copy:
    src: app.py
    dest: /home/ubuntu/myapp/app.py
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Copy vulnService.py
  copy:
    src: vulnService.py
    dest: /home/ubuntu/myapp/vulnService.py
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Copy llm_client.py
  copy:
    src: llm_client.py
    dest: /home/ubuntu/myapp/llm_client.py
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Copy report_generator.py
  copy:
    src: report_generator.py
    dest: /home/ubuntu/myapp/report_generator.py
    owner: ubuntu
    group: ubuntu
    mode: '0644'



- name: Create uploads directory
  file:
    path: /home/ubuntu/myapp/uploads
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Kill existing Flask app if running
  shell: "pkill -f app.py"
  ignore_errors: true

- name: Create systemd service file for Flask
  copy:
    dest: /etc/systemd/system/flask-app.service
    content: |
      [Unit]
      Description=Flask Application
      After=network.target

      [Service]
      Type=simple
      User=ubuntu
      Group=ubuntu
      WorkingDirectory=/home/ubuntu/myapp
      Environment=PATH=/home/ubuntu/myapp/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      Environment=FLASK_APP=app.py
      Environment=FLASK_ENV=production
      Environment=FLASK_DEBUG=0
      Environment=RDS_HOST={{ rds_endpoint }}
      Environment=RDS_USER=admin
      Environment=RDS_PASSWORD={{ db_password }}
      Environment=RDS_DATABASE=flask_app
      Environment=GEMINI_API_KEY={{ gemini_api_key | default('your-gemini-api-key-here') }}
      Environment=UPLOAD_FOLDER=uploads
      Environment=MAX_CONTENT_LENGTH=16777216
      ExecStart=/home/ubuntu/myapp/venv/bin/python app.py
      Restart=always
      RestartSec=10
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start Flask service
  systemd:
    name: flask-app
    state: started
    enabled: yes
  become: true

- name: Wait a moment for service to start
  pause:
    seconds: 5

- name: Check Flask service status immediately
  systemd:
    name: flask-app
  register: flask_service_status
  become: true

- name: Display Flask service status
  debug:
    var: flask_service_status

- name: Check Flask app logs immediately
  shell: journalctl -u flask-app -n 30 --no-pager
  register: flask_logs_immediate
  become: true
  ignore_errors: true

- name: Display immediate Flask logs
  debug:
    var: flask_logs_immediate.stdout_lines

- name: Check if Flask process is running
  shell: ps aux | grep app.py | grep -v grep
  register: flask_process
  become: true
  ignore_errors: true

- name: Display Flask process status
  debug:
    var: flask_process.stdout_lines

- name: Check if port 5000 is listening
  shell: netstat -tlnp | grep :5000 || ss -tlnp | grep :5000
  register: port_check
  become: true
  ignore_errors: true

- name: Display port check result
  debug:
    var: port_check.stdout_lines

- name: Check Flask app file permissions
  shell: ls -la /home/ubuntu/myapp/
  register: file_permissions
  become: true
  ignore_errors: true

- name: Display file permissions
  debug:
    var: file_permissions.stdout_lines

- name: Check Python virtual environment
  shell: /home/ubuntu/myapp/venv/bin/python --version
  register: python_version
  become: true
  ignore_errors: true

- name: Display Python version
  debug:
    var: python_version

- name: Test Flask app manually
  shell: |
    cd /home/ubuntu/myapp
    source venv/bin/activate
    python -c "import app; print('Flask app import successful')"
  register: flask_import_test
  become: true
  ignore_errors: true

- name: Display Flask import test result
  debug:
    var: flask_import_test

- name: Wait for Flask service to start
  wait_for:
    port: 5000
    host: "0.0.0.0"
    delay: 10
    timeout: 60
  become: true
  ignore_errors: true

- name: Check Flask app logs after wait
  shell: journalctl -u flask-app -n 20 --no-pager
  register: flask_logs
  become: true
  ignore_errors: true

- name: Display Flask logs
  debug:
    var: flask_logs.stdout_lines

- name: Test Flask app locally
  uri:
    url: "http://localhost:5000/"
    method: GET
    return_content: yes
    status_code: [200, 404, 500]
  register: local_test
  become: true
  ignore_errors: true

- name: Display local test result
  debug:
    var: local_test
