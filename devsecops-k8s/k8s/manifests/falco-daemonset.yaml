apiVersion: v1
kind: Namespace
metadata:
  name: falco
  labels:
    name: falco
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: falco
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco-cluster-role
rules:
- apiGroups: [""]
  resources:
  - pods
  - services
  - endpoints
  - events
  - configmaps
  - secrets
  - namespaces
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - replicasets
  - statefulsets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
  - jobs
  - cronjobs
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco-cluster-role
subjects:
- kind: ServiceAccount
  name: falco
  namespace: falco
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: falco
  labels:
    app: falco
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
    spec:
      serviceAccountName: falco
      hostNetwork: true
      hostPID: true
      containers:
      - name: falco
        image: falcosecurity/falco:latest
        securityContext:
          privileged: true
          allowPrivilegeEscalation: true
        volumeMounts:
        - name: falco-config
          mountPath: /etc/falco
        - name: falco-rules
          mountPath: /etc/falco/rules.d
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: os-release
          mountPath: /host/etc/os-release
          readOnly: true
        - name: host-root
          mountPath: /host/root
          readOnly: true
        env:
        - name: SYSDIG_HOST_ROOT
          value: /host
        - name: FALCO_GRPC_ENABLED
          value: "true"
        - name: FALCO_GRPC_BIND_ADDRESS
          value: "0.0.0.0:5060"
        - name: FALCO_GRPC_THREADS
          value: "4"
        ports:
        - containerPort: 5060
          protocol: TCP
        - containerPort: 5061
          protocol: TCP
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5060
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5060
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: falco-config
        configMap:
          name: falco-config
      - name: falco-rules
        configMap:
          name: falco-rules
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: os-release
        hostPath:
          path: /etc/os-release
      - name: host-root
        hostPath:
          path: /
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: falco
data:
  falco.yaml: |
    # Falco Configuration
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/rules.d/
    
    # Output Configuration
    webserver:
      enabled: true
      listen_port: 5060
      ssl_enabled: false
    
    # Logging
    log_level: info
    log_stderr: true
    log_syslog: false
    
    # Security Events
    priority: warning
    syscall_event_drops:
      actions:
        - log
        - alert
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: falco
data:
  custom-rules.yaml: |
    # Custom Runtime Security Rules
    - rule: Suspicious Container Creation
      desc: Detect suspicious container creation
      condition: spawned_process and container and proc.name in (bash, sh, zsh)
      output: Suspicious container process started (user=%user.name command=%proc.cmdline container=%container.name)
      priority: WARNING
      tags: [container, runtime]
    
    - rule: Privileged Container Started
      desc: Detect privileged container startup
      condition: container and container.privileged=true
      output: Privileged container started (user=%user.name container=%container.name)
      priority: WARNING
      tags: [container, security]
    
    - rule: Network Connection from Container
      desc: Detect network connections from containers
      condition: container and evt.type=connect and fd.type=ipv4
      output: Container network connection (user=%user.name container=%container.name connection=%fd.name)
      priority: INFO
      tags: [container, network]
    
    - rule: Detect saju-app exec
      desc: Detect shell execution in saju-app container
      condition: container.image contains "saju-app" and evt.type = execve
      output: "Shell in saju-app container (user=%user.name command=%proc.cmdline container=%container.name)"
      priority: WARNING
      tags: [container, runtime, saju-app]
    
    - rule: Saju-app File Access
      desc: Detect file access in saju-app container
      condition: container.image contains "saju-app" and evt.type in (open, openat) and proc.name not in (python, flask)
      output: "File access in saju-app container (user=%user.name file=%fd.name command=%proc.cmdline)"
      priority: INFO
      tags: [container, file-access, saju-app] 