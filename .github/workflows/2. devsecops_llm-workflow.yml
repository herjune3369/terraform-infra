name: DevSecOps Security Scanner

on:
  push:
    branches: [ main, develop ]
    paths:
      - '2. devsecops_llm/**'
  pull_request:
    branches: [ main ]
    paths:
      - '2. devsecops_llm/**'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Scan type'
        required: true
        default: 'image'
        type: choice
        options:
        - image
        - code
        - full
      target:
        description: 'Target to scan (image name or path)'
        required: false
        default: 'nginx:latest'

env:
  AWS_REGION: us-west-2
  TF_VERSION: "1.5.0"

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./2. devsecops_llm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
    
    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
    
    - name: Run Trivy Security Scan
      run: |
        if [ "${{ github.event.inputs.scan_type }}" = "image" ]; then
          echo "üîç Trivy: Scanning container image: ${{ github.event.inputs.target || 'nginx:latest' }}"
          trivy image ${{ github.event.inputs.target || 'nginx:latest' }} --format json --output trivy-image-results.json
          trivy image ${{ github.event.inputs.target || 'nginx:latest' }} --format table --output trivy-image-report.txt
        elif [ "${{ github.event.inputs.scan_type }}" = "code" ]; then
          echo "üîç Trivy: Scanning code directory: ${{ github.event.inputs.target || '.' }}"
          trivy fs ${{ github.event.inputs.target || '.' }} --format json --output trivy-fs-results.json
          trivy fs ${{ github.event.inputs.target || '.' }} --format table --output trivy-fs-report.txt
        else
          echo "üîç Trivy: Running comprehensive security scan"
          trivy fs . --format json --output trivy-comprehensive-results.json
          trivy fs . --format table --output trivy-comprehensive-report.txt
        fi
    
    - name: Upload Trivy Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-reports
        path: |
          ./2. devsecops_llm/trivy-*-results.json
          ./2. devsecops_llm/trivy-*-report.txt
        retention-days: 30
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: './2. devsecops_llm/trivy-*-results.json'

  validate-infrastructure:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./2. devsecops_llm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      run: |
        terraform init
        terraform validate
    
    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./2. devsecops_llm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: |
        terraform init
    
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve
    
    - name: Save Terraform outputs
      run: |
        if [ -f "save_outputs.sh" ]; then
          chmod +x save_outputs.sh
          ./save_outputs.sh
        fi

  deploy-application:
    name: Deploy Security Scanner Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./2. devsecops_llm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3
    
    - name: Deploy with Ansible
      run: |
        cd ansible
        ansible-playbook -i inventories/aws_ec2.yml playbook.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: False

  generate-report:
    name: Generate Trivy Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, deploy-application]
    if: always()
    defaults:
      run:
        working-directory: ./2. devsecops_llm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Trivy Reports
      uses: actions/download-artifact@v4
      with:
        name: trivy-security-reports
        path: ./2. devsecops_llm
    
    - name: Generate Trivy Summary Report
      run: |
        echo "# Trivy Security Scan Report" > trivy-summary-report.md
        echo "Generated on: $(date)" >> trivy-summary-report.md
        echo "" >> trivy-summary-report.md
        echo "## Scan Results" >> trivy-summary-report.md
        echo "" >> trivy-summary-report.md
        
        # Add image scan results if exists
        if [ -f "trivy-image-report.txt" ]; then
          echo "### Container Image Scan Results" >> trivy-summary-report.md
          cat trivy-image-report.txt >> trivy-summary-report.md
          echo "" >> trivy-summary-report.md
        fi
        
        # Add filesystem scan results if exists
        if [ -f "trivy-fs-report.txt" ]; then
          echo "### Filesystem Scan Results" >> trivy-summary-report.md
          cat trivy-fs-report.txt >> trivy-summary-report.md
          echo "" >> trivy-summary-report.md
        fi
        
        # Add comprehensive scan results if exists
        if [ -f "trivy-comprehensive-report.txt" ]; then
          echo "### Comprehensive Scan Results" >> trivy-summary-report.md
          cat trivy-comprehensive-report.txt >> trivy-summary-report.md
          echo "" >> trivy-summary-report.md
        fi
    
    - name: Upload Final Trivy Report
      uses: actions/upload-artifact@v4
      with:
        name: final-trivy-report
        path: |
          ./2. devsecops_llm/trivy-summary-report.md
          ./2. devsecops_llm/trivy-*-results.json
          ./2. devsecops_llm/trivy-*-report.txt
        retention-days: 90

  notify:
    name: Notify Security Scan Results
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always()
    
    steps:
    - name: Download Final Trivy Report
      uses: actions/download-artifact@v4
      with:
        name: final-trivy-report
        path: ./reports
    
    - name: Notify on Success
      if: needs.generate-report.result == 'success'
      run: |
        echo "‚úÖ Trivy security scan completed successfully!"
        echo "Scan type: ${{ github.event.inputs.scan_type || 'full' }}"
        echo "Target: ${{ github.event.inputs.target || 'default' }}"
        if [ -f "./reports/trivy-summary-report.md" ]; then
          echo "Trivy security report generated successfully"
        fi
    
    - name: Notify on Failure
      if: needs.generate-report.result == 'failure'
      run: |
        echo "‚ùå Trivy security scan failed!"
        echo "Scan type: ${{ github.event.inputs.scan_type || 'full' }}"
        echo "Target: ${{ github.event.inputs.target || 'default' }}"
        exit 1 